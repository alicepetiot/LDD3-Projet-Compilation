# 1 "minic_lexer.mll"
 
  open Lexing
  open Minic_parser

  (* Fonction auxiliaire pour rassembler les mots-clÃ©s *)
  let keyword_or_ident =
    let h = Hashtbl.create 40 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "return", RETURN;
        "true", BOOL_CST true;
        "false", BOOL_CST false;
        "int", INT;
        "bool", BOOL;
        "void", VOID;
        "putchar", PUTCHAR;
        "while", WHILE;
		"if", IF;
		"else", ELSE;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 27 "minic_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\232\255\233\255\234\255\002\000\001\000\237\255\238\255\
    \239\255\240\255\002\000\003\000\245\255\246\255\247\255\248\255\
    \030\000\251\255\079\000\154\000\002\000\255\255\250\255\244\255\
    \242\255\236\255\235\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\022\000\022\000\255\255\255\255\
    \255\255\255\255\014\000\012\000\255\255\255\255\255\255\255\255\
    \006\000\255\255\003\000\002\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\021\000\020\000\000\000\020\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\020\000\000\000\000\000\000\000\005\000\025\000\
    \015\000\014\000\006\000\009\000\003\000\008\000\000\000\007\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\017\000\010\000\016\000\011\000\024\000\
    \023\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\022\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\013\000\004\000\012\000\026\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\255\255\000\000\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\020\000\255\255\255\255\255\255\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\016\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 34 "minic_lexer.mll"
           ( new_line lexbuf; token lexbuf )
# 171 "minic_lexer.ml"

  | 1 ->
# 35 "minic_lexer.mll"
                     ( token lexbuf )
# 176 "minic_lexer.ml"

  | 2 ->
let
# 36 "minic_lexer.mll"
              n
# 182 "minic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "minic_lexer.mll"
                ( CST(int_of_string n) )
# 186 "minic_lexer.ml"

  | 3 ->
let
# 37 "minic_lexer.mll"
             id
# 192 "minic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "minic_lexer.mll"
                ( keyword_or_ident id )
# 196 "minic_lexer.ml"

  | 4 ->
# 38 "minic_lexer.mll"
        ( SEMI )
# 201 "minic_lexer.ml"

  | 5 ->
# 39 "minic_lexer.mll"
         ( EQUAL )
# 206 "minic_lexer.ml"

  | 6 ->
# 40 "minic_lexer.mll"
        ( SET )
# 211 "minic_lexer.ml"

  | 7 ->
# 41 "minic_lexer.mll"
        ( LPAR )
# 216 "minic_lexer.ml"

  | 8 ->
# 42 "minic_lexer.mll"
        ( RPAR )
# 221 "minic_lexer.ml"

  | 9 ->
# 43 "minic_lexer.mll"
        ( BEGIN )
# 226 "minic_lexer.ml"

  | 10 ->
# 44 "minic_lexer.mll"
        ( END )
# 231 "minic_lexer.ml"

  | 11 ->
# 45 "minic_lexer.mll"
         ( SUPEQ )
# 236 "minic_lexer.ml"

  | 12 ->
# 46 "minic_lexer.mll"
        ( SUP )
# 241 "minic_lexer.ml"

  | 13 ->
# 47 "minic_lexer.mll"
        ( INFEQ )
# 246 "minic_lexer.ml"

  | 14 ->
# 48 "minic_lexer.mll"
        ( INF )
# 251 "minic_lexer.ml"

  | 15 ->
# 49 "minic_lexer.mll"
        ( ADD )
# 256 "minic_lexer.ml"

  | 16 ->
# 50 "minic_lexer.mll"
        ( NEG )
# 261 "minic_lexer.ml"

  | 17 ->
# 51 "minic_lexer.mll"
        ( DIV )
# 266 "minic_lexer.ml"

  | 18 ->
# 52 "minic_lexer.mll"
        ( MUL )
# 271 "minic_lexer.ml"

  | 19 ->
# 53 "minic_lexer.mll"
         ( AND )
# 276 "minic_lexer.ml"

  | 20 ->
# 54 "minic_lexer.mll"
         ( OR )
# 281 "minic_lexer.ml"

  | 21 ->
# 55 "minic_lexer.mll"
        ( COMMA )
# 286 "minic_lexer.ml"

  | 22 ->
# 56 "minic_lexer.mll"
      ( failwith ("Unknown character : " ^ (lexeme lexbuf)) )
# 291 "minic_lexer.ml"

  | 23 ->
# 57 "minic_lexer.mll"
        ( EOF )
# 296 "minic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

